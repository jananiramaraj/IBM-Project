# -*- coding: utf-8 -*-
"""Health AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cVAUQiPm-9zXrmsiXF8l6INTHpvNr45a
"""

!pip install transformers torch gradio plotly -q



import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -----------------------------
# Load Model & Tokenizer
# -----------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None,
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -----------------------------
# Response Generator
# -----------------------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id,
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# -----------------------------
# Chat Function
# -----------------------------
def chat(patient_name, age, gender, history, medications, allergies, message, history_chat=[]):
    profile = f"Patient Name: {patient_name}\nAge: {age}\nGender: {gender}\nHistory: {history}\nMedications: {medications}\nAllergies: {allergies}\n"
    prompt = profile + "\nUser: " + message + "\nAssistant:"
    response = generate_response(prompt, max_length=512)

    history_chat.append(("You: " + message, "AI: " + response))
    return history_chat, history_chat

# -----------------------------
# Gradio Interface
# -----------------------------
with gr.Blocks(css=".gradio-container {background-color: #f5f7fa}") as app:
    gr.Markdown("## ðŸ©º HealthAI - Intelligent Healthcare Assistant")
    gr.Markdown("24/7 Patient Support | *Ask any health-related question for immediate assistance.*")

    with gr.Row():
        # Patient Profile (Sidebar)
        with gr.Column(scale=1):
            patient_name = gr.Textbox(label="Name")
            age = gr.Number(label="Age", value=30)
            gender = gr.Dropdown(["Male", "Female", "Other"], label="Gender", value="Male")
            history = gr.Textbox(label="Medical History", placeholder="Previous conditions...")
            medications = gr.Textbox(label="Current Medications", placeholder="e.g., Paracetamol, Insulin...")
            allergies = gr.Textbox(label="Allergies", placeholder="e.g., Penicillin")

        # Chat Window
        with gr.Column(scale=3):
            chatbot = gr.Chatbot(label="Patient Chat")
            msg = gr.Textbox(label="Ask your health question...", placeholder="Type your message here...")
            send_btn = gr.Button("Send")

            state = gr.State([])  # Chat history

            send_btn.click(
                chat,
                inputs=[patient_name, age, gender, history, medications, allergies, msg, state],
                outputs=[chatbot, state]
            )

# Launch with share link
app.launch(share=True)